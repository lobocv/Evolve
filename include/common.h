#ifndef __EVOLVE_COMMON
#define __EVOLVE_COMMON

#include <utility>
#include <vector>
#include <cstdlib>
#include <map>


// Forward Declarations
class Chromosome;
class Creature;
class Species;
class Gene;
class Trait;
class Ecosystem;

// Typedefs

typedef std::pair<Chromosome, Chromosome> ChromosomePair;
typedef std::vector<ChromosomePair> Genome;
typedef std::map<char, Gene> GeneSequence;

enum Sex{Male, Female};
enum GeneType{Dominant, Recessive};
enum TraitType{Binary, Discrete, Polygenic};

// Exceptions
/** @brief Base class exceptions for all exceptions generated by this project. */
class EvolveException {};

/** @brief Thrown when two incompatible creatures try to reproduce. */
class CannotProcreateError : public EvolveException {};

/** @brief Thrown when not all of the traits genes are represented in the creature. */
class UnrepresentedTraitError : public EvolveException {};

/** @brief When the parameters for trait creation are invalid. */
class InvalidTraitParameterError : public EvolveException {};

/** @brief When the parameters for trait creation are invalid. */
class InvalidAttributeParameterError : public EvolveException {};

inline bool FlipCoin() {return std::rand() % 2;}

#endif
