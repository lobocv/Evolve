#ifndef __EVOLVE_COMMON
#define __EVOLVE_COMMON

#include <utility>
#include <vector>
#include <cstdlib>
#include <map>
#include <exception>

// Forward Declarations
class Chromosome;
class Creature;
class Species;
class Gene;
class Trait;
class TraitWeighting;
class Ecosystem;
// Typedefs

typedef std::pair<Chromosome, Chromosome> ChromosomePair;
typedef std::vector<ChromosomePair> Genome;
typedef std::map<char, Gene> GeneSequence;

enum Sex{Male, Female};
enum GeneType{Dominant, Recessive};
enum TraitType{Binary, Discrete, Polygenic};

// Exceptions
/** @brief Base class exceptions for all exceptions generated by this project. */
class EvolveException : std::exception
{
public:
    const std::string message_;
    EvolveException() {}
    virtual ~EvolveException(){}
    EvolveException(const std::string message) : message_(message) {}
    virtual const char* what() const throw() {return message_.c_str();}
};

/** @brief Thrown when two incompatible creatures try to reproduce. */
class CannotProcreateError : public EvolveException
{
public:
    CannotProcreateError(const std:: string message) : EvolveException(message) {}
};

/** @brief Thrown when not all of the traits genes are represented in the creature. */
class UnrepresentedTraitError : public EvolveException
{
public:
    UnrepresentedTraitError(const std::string message) : EvolveException(message) {}
};

/** @brief When the parameters for trait creation are invalid. */
class InvalidTraitParameterError: public EvolveException
{
public:
    InvalidTraitParameterError(const std::string message) : EvolveException(message) {}
};

/** @brief When the parameters for trait creation are invalid. */
class InvalidAttributeParameterError: public EvolveException
{
public:
    InvalidAttributeParameterError(const std::string message) : EvolveException(message) {}
};

inline bool FlipCoin() {return std::rand() % 2;}

template <class T>
inline std::ostream &operator<<(std::ostream &stream, const std::vector<T> &obj)
{
    if (obj.size() > 0)
    {
        for (int ii=0; ii < obj.size()-1; ii++)
        {
            stream << obj[ii] << ", ";
        }
        stream << obj[obj.size()-1];
    }
    return stream;
}

#endif
